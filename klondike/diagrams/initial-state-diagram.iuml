
@startuml initial-state


object ":Klondike" as klondike
object ":Stock" as stock
object ":Waste" as waste
object ":Foundation" as foundation1
object ":Foundation" as foundation2
object ":Foundation" as foundation3
object ":Foundation" as foundation4
object ":Pile" as pile1
object ":Pile" as pile2
object ":Pile" as pile3
object ":Pile" as pile4
object ":Pile" as pile5
object ":Pile" as pile6
object ":Pile" as pile7
object ":Card" as cardStock
object ":Diamond" as cardPile1
object ":Club" as cardPile2
object ":Card" as cardRandomPile2
object ":Diamond" as cardPile3
object ":Card" as cardRandomPile3
object ":Heart" as cardPile4
object ":Card" as cardRandomPile4
object ":Club" as cardPile5
object ":Card" as cardRandomPile5
object ":Spade" as cardPile6
object ":Card" as cardRandomPile6
object ":Heart" as cardPile7
object ":Card" as cardRandomPile7

'STOCK'
cardStock : color  = random
cardStock : rank   = random
cardStock : upTurnCard = false

stock o-- cardStock: 24


'WASTE'
note as noteWaste
Waste is empty
end note
waste .. noteWaste

'FOUNDATION'
note as noteFoundations
All foundations are empty
end note

foundation1 .. noteFoundations
foundation2 .. noteFoundations
foundation3 .. noteFoundations
foundation4 .. noteFoundations


'PILE 1'
cardPile1 : color  = Color.RED
cardPile1 : rank   = Rank.2
cardPile1 : upTurnCard = true

pile1 o-- cardPile1

'PILE 2'
cardRandomPile2 : color  = random
cardRandomPile2 : rank   = random
cardRandomPile2 : upTurnCard = false

cardPile2 : color  = Color.RED
cardPile2 : rank   = Rank.A
cardPile2 : upTurnCard = true

pile2 o-- cardPile2
pile2 o-- cardRandomPile2:1


'PILE 3'
cardRandomPile3 : color  = random
cardRandomPile3 : rank   = random
cardRandomPile3 : upTurnCard = false

cardPile3 : color  = Color.RED
cardPile3 : rank   = Rank.J
cardPile3 : upTurnCard = true

pile3 o-- cardPile3
pile3 o-- cardRandomPile3:2


'PILE 4'
cardRandomPile4 : color  = random
cardRandomPile4 : rank   = random
cardRandomPile4 : upTurnCard = false

cardPile4 : color  = Color.RED
cardPile4 : rank   = Rank.K
cardPile4 : upTurnCard = true

pile4 o-- cardPile4
pile4 o-- cardRandomPile4:3


'PILE 5'

cardRandomPile5 : color  = random
cardRandomPile5 : rank   = random
cardRandomPile5 : upTurnCard = false

cardPile5 : color  = Color.BLACK
cardPile5 : rank   = Rank.4
cardPile5 : upTurnCard = true

pile5 o-- cardPile5
pile5 o-- cardRandomPile5:4


'PILE 6'
cardRandomPile6 : color  = random
cardRandomPile6 : rank   = random
cardRandomPile6 : upTurnCard = false

cardPile6 : color  = Color.BLACK
cardPile6 : rank   = Rank.5
cardPile6 : upTurnCard = true

pile6 o-- cardPile6
pile6 o-- cardRandomPile6:5


'PILE 7'
cardRandomPile7 : color  = random
cardRandomPile7 : rank   = random
cardRandomPile7 : upTurnCard = false

cardPile7 : color  = Color.RED
cardPile7 : rank   = Rank.K
cardPile7 : upTurnCard = true

pile7 o-- cardPile7
pile7 o-- cardRandomPile7:6


'NOTE LAST CARD OF PILE'
note as noteLastCardOfPile
The last card is turned face up, 
the rest of the cards of the pile are turned face down 
(on top of the last card).
end note

cardPile1 .. noteLastCardOfPile
cardPile2 .. noteLastCardOfPile
cardPile3 .. noteLastCardOfPile
cardPile4 .. noteLastCardOfPile
cardPile5 .. noteLastCardOfPile
cardPile6 .. noteLastCardOfPile
cardPile7 .. noteLastCardOfPile

cardRandomPile2 .. noteLastCardOfPile
cardRandomPile3 .. noteLastCardOfPile
cardRandomPile4 .. noteLastCardOfPile
cardRandomPile5 .. noteLastCardOfPile
cardRandomPile6 .. noteLastCardOfPile
cardRandomPile7 .. noteLastCardOfPile

'KLONDIKE'
klondike *-- stock
klondike *-- waste
klondike *-- foundation1
klondike *-- foundation2
klondike *-- foundation3
klondike *-- foundation4
klondike *-- pile1
klondike *-- pile2
klondike *-- pile3
klondike *-- pile4
klondike *-- pile5
klondike *-- pile6
klondike *-- pile7

@enduml